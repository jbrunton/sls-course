service:
  name: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:
    - ${file(roles/AuctionsTable.yml):AuctionsTable}
    - ${file(roles/MailQueue.yml):MailQueue}
    - ${file(roles/AuctionsBucket.yml):AuctionsBucket}

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions:

  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auctions/{id}
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/bid
          authorizer: ${self:custom.authorizer}

  uploadAuctionImage:
    handler: src/handlers/uploadAuctionImage.handler
    events:
      - http:
          method: PATCH
          path: /auctions/{id}/image
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
    events:
      - schedule: rate(1 minute)

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-6e1e6801-${self:provider.stage}
  customDomain:
    domainName: ${self:provider.stage}.sls-course.jbrunton-aws.com
    stage: ${self:provider.stage}
    basePath: auctions
    certificateName: '*.sls-course.jbrunton-aws.com'
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
